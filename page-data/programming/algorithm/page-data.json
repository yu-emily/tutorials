{"componentChunkName":"component---src-templates-lesson-jsx","path":"/programming/algorithm/","result":{"data":{"site":{"siteMetadata":{"title":"The Programming Foundation"}},"mdx":{"frontmatter":{"title":"Algorithm"}}},"pageContext":{"id":"59244cb0-7d40-561e-9a6a-f6bcc36c6ca8","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Algorithm\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Algorithm\"), mdx(\"h3\", null, \"An algorithm is the set of instructions in steps to solve a problem.\"), mdx(\"p\", null, \"In real-life if you had to count the number of members in a room, you would count one by one until you finish counting the last member.\"), mdx(\"p\", null, \"So we count a member and add a next to the previous counted number and repeat the same procedure until there are no members in the room. This is a step-wise procedure and that a normal person follows to count the members.\"), mdx(\"p\", null, \"For a computer to do the exact steps like humans, we create an algorithm containing the steps to execute. In this case, pseudo-code of an algorithm to count the members will be like.\"), mdx(\"h2\", null, \"Flowchart\"), mdx(\"p\", null, \"An algorithm can be described as a pictorial representation with different symbols, shapes, arrow that describes the different process. Each shape describes a different process:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The process is represented graphically.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The process is described block by block.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The described steps are easy to follow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cost less time and does not require the understanding of code.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"staticQueryHashes":[]}