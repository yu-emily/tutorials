{"componentChunkName":"component---src-templates-lesson-jsx","path":"/programming/oop/inheritance/","result":{"data":{"site":{"siteMetadata":{"title":"The Programming Foundation"}},"mdx":{"frontmatter":{"title":"Inheritance"}}},"pageContext":{"id":"d4f1a810-a500-54a3-a84d-553fabb7a1bd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Inheritance\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Inheritance\"), mdx(\"p\", null, \"Inheritance in OOP is a concept that allows inheriting the features of other classes. This is a real-life concept where a child inherits its properties from his parents, in a similar way a child class inherits the features of its parent class.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"parent class\"), \" is called \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"super\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"base\"), \" class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"child class\"), \" is called \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"sub\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"derived\"), \" class.\")), mdx(\"p\", null, \"In OOP, the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sub class\"), \" inherits the properties from its \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"super class\"), \". The inheritance is achieved in 4 different ways\"), mdx(\"h2\", null, \"Single inheritance\"), mdx(\"p\", null, \"The derived class inherits the properties of the base class. This enables the usability of code and allows adding new features in derived class without affecting the base class.\"), mdx(\"h2\", null, \"Multi-level inheritance\"), mdx(\"p\", null, \"A class inheriting from derived class creates multiple inheritance. A class has more than one parent and can inherit their functions.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"staticQueryHashes":[]}