{"componentChunkName":"component---src-templates-lesson-jsx","path":"/programming/oop/abstraction/","result":{"data":{"site":{"siteMetadata":{"title":"The Programming Foundation"}},"mdx":{"frontmatter":{"title":"Abstraction"}}},"pageContext":{"id":"8df23980-7938-56a0-958d-6e4608f23d6c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Abstraction\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Abstraction\"), mdx(\"h3\", null, \"Abstraction concept comes with a real-time scenario, where only necessary details are revealed\"), mdx(\"p\", null, \"A real-life example of a man driving car displays the abstraction of the mechanism implemented in the car. The driver is exposed to the ABC parts of the car i.e accelerator, brake and clutch. He is just aware of using these tools to move the car but is unaware of how the car moves when an accelerator is pressed. This is called abstraction.\"), mdx(\"p\", null, \"In OOP, the abstraction allows the classes to expose only limited functions via the interface of abstract methods. The clients that use these interfaces are not aware of other internal functions that help in processing their request or call. This also allows the hiding of information from the outside world.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"staticQueryHashes":[]}