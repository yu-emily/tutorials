{"componentChunkName":"component---src-templates-lesson-jsx","path":"/logic/gates/","result":{"data":{"site":{"siteMetadata":{"title":"The Programming Foundation"}},"mdx":{"frontmatter":{"title":"Gates"}}},"pageContext":{"id":"5d1d0bf6-a166-5f65-bb3c-f83a028ccc4a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gates\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Gates\"), mdx(\"h3\", null, \"Digits 0 and 1, have a numerical significance on our lives. The numbers having 0 are valued when the zeros are to the right rather than to the left. E.g: number 100 is valued than number 001. But in smart digital devices, it has logical significance. The digits 1 and 0 are valued as high and low numbers. While these digits are valued as the output, the decision making element is called the Logic Gates.\"), mdx(\"p\", null, \"These are the building blocks of the digital system. Logic gates are an implementation of an electronic device to have a logical operation to be performed on one or more binary inputs to produce a single binary output.\"), mdx(\"p\", null, \"For example, the input of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0 and 1\"), \" will have a single output \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1 or 0\"), \" depending on the type of logic gate applied to these inputs. The output of the digital logic gates will be determined in two ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The type of logic gate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The nature of the input variable\")), mdx(\"h2\", null, \"Truth tables\"), mdx(\"p\", null, \"The truth table is a mathematical table that displays the input variable and output variables determined by the logic gates. The truth table is made of rows and columns.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each input variable represents one column and the last column in known for the output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each row represents the possible combinations of input variables and the outcome of these combinations.\")), mdx(\"p\", null, \"The output of the table depends on the logic gate, rather it just displays the input and output for the logic gates. The below truth table displays the input and output of variables. Here the output for the single variables is displayed. The output depends on the logic gates used to create the table.\"), mdx(\"h2\", null, \"Different logic gates\"), mdx(\"p\", null, \"There are numerous gates available. Each has a specific symbol and a defined behavior to determine the output. There are two major classifications in Gates:\"), mdx(\"h2\", null, \"Basic gates\"), mdx(\"p\", null, \"These are fundamental logic operations for which all the complex functions can be derived. These are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AND\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OR\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOT\"), \".\"), mdx(\"h3\", null, \"AND Gate\"), mdx(\"p\", null, \"In AND logical gate if both the inputs are switched \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ON\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \" then the output is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \". The below diagram shows the three-way gate logic can work.\"), mdx(\"h3\", null, \"OR Gate\"), mdx(\"p\", null, \"In OR the output is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \", when either of the input is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \". However, when both inputs are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0s\"), \", the output is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0\"), \".\"), mdx(\"h3\", null, \"NOT Gate\"), mdx(\"p\", null, \"Unlike other basic gates, NOT gate has one input and one output. The output is inverse of the input.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"staticQueryHashes":[]}